# This directory contains .yml files specifying metric collection points
# Each yaml file contains a "metrics_url:" value with either a URL string
# or a list of URL strings to collect from using the base filename as
# the identifier for the service the metrics came from.
# If not specified the default will be the first of:
#    ../registry, ../registry.dev, /opt/spinnaker-monitoring/registry
registry_dir:

# If not specified the default will be the first of:
#    ../filters, /opt/spinnaker-monitoring/filters
metric_filter_dir:

server:
  # This host and port to bind the embedded HTTP server on.
  host: localhost
  port: 8008


spectator:
  # Configures how to process ingested spectator metrics

  # Determines whether a "spin_service" tag should be added to each
  # metric identifying which service is reporting the metric.
  # By default if this is off then the metric names themselves will
  # be decorated to the service making them service-specific.
  inject_service_tag: False

  # Determines whether or not to decorate the spectator metric name
  # with the service name reporting it. Normally the services report
  # metrics using generic names. If this is turned on then the service
  # name will be added to the metric name to make them unique to the
  # service.
  #
  # If left unset this will be the opposite of "inject_service_tag"
  # because the name is superfluous with the tags but needed to
  # give context to the metric without the tags.
  decorate_metric_name: 


monitor:
  # The frequency to poll each of the metric sources in the <registry>
  period: 30

  # Enable the one you are interested in using by uncommenting it.
  # This will be automatically updated by the third_party/*/instal.sh
  # if this file exists when the install is run with client install enabled.
  metric_store:
#    - datadog
#    - prometheus
#    - stackdriver


datadog:
  # This is typically populated by the third_party/datadog/install.sh script
  # if this file exists when the install is run with client install enabled.
  api_key:


prometheus:
  add_source_metalabels: True

  # Set this to True to use standard prometheus naming conventions.
  # Historically Spinnaker metrics contained ':' in their prometheus names
  # as a replacement for '.' in spectator metric names to indicate hierarchy.
  # However this is non-standard and ':' is intended to have other use.
  # Set this value to False to use the old-style names for backward compatability
  # with your existing data.
  use_standard_notation: False

  # If the push_gateway is defined, then metrics will be pushed to the given url.
  # This could be something like "host:9091" or "http://host:9091".
  # If the gateway is empty then data will not be pushed and the server will
  # expect that prometheus will poll the daemon directly from
  # the URL path "/prometheus_metrics".
  #
  # This value will be updated by third_party/prometheus/install.sh
  # if this file is present when the script is run with --gateway=<url>
  # and client install enabled.
  push_gateway:


stackdriver:
  # A path to the credentials file to use with Stackdriver.
  # If left blank, this will use the application default credentials.
  credentials_path:

  # The project to report these metrics for.
  project:

  # If this instance is on GCP, this is the zone to report the instance for.
  # If left blank, and on GCP, this will be the zone we are running in.
  zone:

  # The instance id (is a number)
  # If left blank, and on GCP, this will populate from the metadata server.
  instance_id:

  # This is EXPERIMENTAL
  # If set to True then use "generic_task" as the monitored resource
  # rather than the deployment environment. The task will be labeled
  # with the service being monitored.
  generic_task_resources: