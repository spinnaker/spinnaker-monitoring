{
  "read_only": true, 
  "graphs": [
    {
      "definition": {
        "viz": "timeseries", 
        "requests": [
          {
            "q": "avg:system.load.1{*}", 
            "aggregator": "avg", 
            "conditional_formats": [], 
            "type": "line"
          }, 
          {
            "q": "avg:system.mem.used{*} / avg:system.mem.total{*}", 
            "type": "line"
          }
        ]
      }, 
      "title": "System Load and Pct Memory Used"
    }, 
    {
      "definition": {
        "viz": "timeseries", 
        "requests": [
          {
            "q": "avg:front50.jvm.memory.used{*}", 
            "aggregator": "avg", 
            "conditional_formats": [], 
            "type": "line"
          }, 
          {
            "q": "avg:clouddriver.jvm.memory.used{*}", 
            "type": "line"
          }, 
          {
            "q": "avg:orca.jvm.memory.used{*}", 
            "type": "line"
          }, 
          {
            "q": "avg:gate.jvm.memory.used{*}", 
            "type": "line"
          }, 
          {
            "q": "avg:igor.jvm.memory.used{*}", 
            "type": "line"
          }, 
          {
            "q": "avg:rosco.jvm.memory.used{*}", 
            "type": "line"
          }, 
          {
            "q": "avg:echo.jvm.memory.used{*}", 
            "type": "line"
          }
        ]
      }, 
      "title": "jvm memory used"
    }, 
    {
      "definition": {
        "viz": "timeseries", 
        "requests": [
          {
            "q": "per_minute(sum:gate.hystrix.rollingCountShortCircuited{*} by {metricgroup})", 
            "aggregator": "avg", 
            "conditional_formats": [], 
            "type": "bars"
          }, 
          {
            "q": "per_minute(sum:igor.hystrix.rollingCountShortCircuited{*} by {metricgroup})", 
            "type": "bars"
          }, 
          {
            "q": "per_minute(sum:front50.hystrix.rollingCountShortCircuited{*} by {metricgroup})", 
            "type": "bars"
          }
        ]
      }, 
      "title": "Hystrix Rolling Count Short Circuited (per minute)"
    }, 
    {
      "definition": {
        "viz": "timeseries", 
        "requests": [
          {
            "q": "diff(sum:front50.hystrix.countExceptionsThrown{*})", 
            "aggregator": "avg", 
            "conditional_formats": [], 
            "type": "line"
          }, 
          {
            "q": "diff(sum:igor.hystrix.countExceptionsThrown{*})", 
            "type": "line"
          }, 
          {
            "q": "diff(sum:gate.hystrix.countExceptionsThrown{*})", 
            "type": "line"
          }
        ], 
        "autoscale": true
      }, 
      "title": "Hystrix Exceptions Thrown (per minute)"
    }, 
    {
      "definition": {
        "viz": "timeseries", 
        "requests": [
          {
            "q": "per_minute(sum:gate.hystrix.rollingCountFailure{*})", 
            "aggregator": "avg", 
            "conditional_formats": [], 
            "type": "bars", 
            "style": {
              "palette": "dog_classic"
            }
          }, 
          {
            "q": "per_minute(sum:gate.hystrix.countFallbackSuccess{*})", 
            "style": {
              "palette": "dog_classic"
            }, 
            "type": "bars"
          }, 
          {
            "q": "per_minute(sum:igor.hystrix.rollingCountFailure{*})", 
            "style": {
              "palette": "cool"
            }, 
            "type": "bars"
          }, 
          {
            "q": "per_minute(sum:igor.hystrix.countFallbackSuccess{*})", 
            "style": {
              "width": "thick", 
              "palette": "cool", 
              "type": "dashed"
            }, 
            "type": "line"
          }, 
          {
            "q": "per_minute(sum:front50.hystrix.rollingCountFailure{*})", 
            "style": {
              "palette": "warm"
            }, 
            "type": "line"
          }, 
          {
            "q": "per_minute(sum:front50.hystrix.countFallbackSuccess{*})", 
            "style": {
              "width": "thick", 
              "palette": "warm", 
              "type": "dashed"
            }, 
            "type": "line"
          }
        ]
      }, 
      "title": "Rolling Count Failure (per minute)"
    }, 
    {
      "definition": {
        "viz": "timeseries", 
        "requests": [
          {
            "q": "per_minute(sum:clouddriver.controller.invocations_count{!status:2xx} by {statuscode})", 
            "aggregator": "avg", 
            "conditional_formats": [], 
            "type": "line"
          }, 
          {
            "q": "per_minute(sum:front50.controller.invocations_count{!status:2xx} by {statuscode})", 
            "aggregator": "avg", 
            "conditional_formats": [], 
            "type": "line"
          }, 
          {
            "q": "per_minute(sum:gate.controller.invocations_count{!status:2xx} by {statuscode})", 
            "aggregator": "avg", 
            "conditional_formats": [], 
            "type": "line"
          }, 
          {
            "q": "per_minute(sum:orca.controller.invocations_count{!status:2xx} by {statuscode})", 
            "aggregator": "avg", 
            "conditional_formats": [], 
            "type": "line"
          }, 
          {
            "q": "per_minute(sum:igor.controller.invocations_count{!status:2xx} by {statuscode})", 
            "aggregator": "avg", 
            "conditional_formats": [], 
            "type": "line"
          }, 
          {
            "q": "per_minute(sum:rosco.controller.invocations_count{!status:2xx} by {statuscode})", 
            "aggregator": "avg", 
            "conditional_formats": [], 
            "type": "line"
          }
        ]
      }, 
      "title": "Microservice Controller Invocation Failure Rate (per minute)"
    }, 
    {
      "definition": {
        "viz": "timeseries", 
        "requests": [
          {
            "q": "per_minute(sum:gate.controller.invocations_count{*})", 
            "aggregator": "avg", 
            "conditional_formats": [], 
            "type": "line"
          }, 
          {
            "q": "per_minute(sum:orca.controller.invocations_count{*})", 
            "type": "line"
          }, 
          {
            "q": "per_minute(sum:clouddriver.controller.invocations_count{*})", 
            "type": "line"
          }, 
          {
            "q": "per_minute(sum:front50.controller.invocations_count{*})", 
            "type": "line"
          }, 
          {
            "q": "per_minute(sum:igor.controller.invocations_count{*})", 
            "type": "line"
          }, 
          {
            "q": "per_minute(sum:rosco.controller.invocations_count{*})", 
            "type": "line"
          }
        ]
      }, 
      "title": "Microservice Controller Invocations (per minute)"
    }, 
    {
      "definition": {
        "viz": "timeseries", 
        "requests": [
          {
            "q": "per_minute(sum:gate.controller.invocations_totalTime{*}) / 1000000 / per_minute(sum:gate.controller.invocations_count{*})", 
            "aggregator": "avg", 
            "conditional_formats": [], 
            "type": "line"
          }, 
          {
            "q": "per_minute(sum:orca.controller.invocations_totalTime{*}) / 1000000 / per_minute(sum:orca.controller.invocations_count{*})", 
            "type": "line"
          }, 
          {
            "q": "per_minute(sum:clouddriver.controller.invocations_totalTime{*}) / 1000000 / per_minute(sum:clouddriver.controller.invocations_count{*})", 
            "type": "line"
          }, 
          {
            "q": "per_minute(sum:front50.controller.invocations_totalTime{*}) / 1000000 / per_minute(sum:front50.controller.invocations_count{*})", 
            "type": "line"
          }, 
          {
            "q": "per_minute(sum:igor.controller.invocations_totalTime{*}) / 1000000 / per_minute(sum:igor.controller.invocations_count{*})", 
            "type": "line"
          }, 
          {
            "q": "per_minute(sum:rosco.controller.invocations_totalTime{*}) / 1000000 / per_minute(sum:rosco.controller.invocations_count{*})", 
            "type": "line"
          }
        ]
      }, 
      "title": "Avg Microservice Controller Invocation Time (ms per minute)"
    }, 
    {
      "definition": {
        "viz": "timeseries", 
        "requests": [
          {
            "q": "per_minute(sum:clouddriver.controller.invocations_count{*} by {method})", 
            "aggregator": "avg", 
            "conditional_formats": [], 
            "type": "line"
          }, 
          {
            "q": "per_minute(sum:clouddriver.controller.invocations_count{*})", 
            "aggregator": "avg", 
            "conditional_formats": [], 
            "type": "line", 
            "style": {
              "palette": "grey", 
              "type": "dotted"
            }
          }
        ]
      }, 
      "title": "Clouddriver Controller Invocations (per minute)"
    }, 
    {
      "definition": {
        "viz": "timeseries", 
        "requests": [
          {
            "q": "per_minute(sum:clouddriver.controller.invocations_totalTime{*} by {method}) / 1000000 / per_minute(sum:clouddriver.controller.invocations_count{*} by {method})", 
            "aggregator": "avg", 
            "conditional_formats": [], 
            "type": "line"
          }
        ], 
        "autoscale": true
      }, 
      "title": "Avg Clouddriver Controller Invocation Time (ms per minute)"
    }, 
    {
      "definition": {
        "viz": "timeseries", 
        "requests": [
          {
            "q": "diff(sum:clouddriver.operations_count{success:true} by {operationtype})", 
            "aggregator": "avg", 
            "conditional_formats": [], 
            "type": "bars"
          }
        ], 
        "autoscale": true
      }, 
      "title": "Successful Operations (per minute)"
    }, 
    {
      "definition": {
        "viz": "timeseries", 
        "requests": [
          {
            "q": "diff(sum:clouddriver.operations_count{success:false} by {operationtype})", 
            "aggregator": "avg", 
            "conditional_formats": [], 
            "type": "bars"
          }
        ], 
        "autoscale": true
      }, 
      "title": "Failed Operations (per minute)"
    }, 
    {
      "definition": {
        "viz": "timeseries", 
        "requests": [
          {
            "q": "per_second(sum:front50.controller.invocations_count{*} by {method})", 
            "aggregator": "avg", 
            "conditional_formats": [], 
            "type": "line"
          }, 
          {
            "q": "per_second(sum:front50.controller.invocations_count{*})", 
            "style": {
              "palette": "grey", 
              "type": "dotted"
            }, 
            "type": "line"
          }
        ]
      }, 
      "title": "Front50 Controller Invocations (per minute)"
    }, 
    {
      "definition": {
        "viz": "timeseries", 
        "requests": [
          {
            "q": "per_second(sum:front50.controller.invocations_totalTime{*} by {method}) / 1000000 / per_second(avg:front50.controller.invocations_count{*} by {method})", 
            "aggregator": "avg", 
            "conditional_formats": [], 
            "type": "line"
          }
        ]
      }, 
      "title": "Avg Front50 Controller Invocation Time (ms per minute)"
    }, 
    {
      "definition": {
        "viz": "timeseries", 
        "requests": [
          {
            "q": "per_minute(sum:gate.controller.invocations_count{*} by {method})", 
            "aggregator": "avg", 
            "conditional_formats": [], 
            "type": "bars"
          }, 
          {
            "q": "per_minute(sum:gate.controller.invocations_count{*})", 
            "style": {
              "palette": "grey", 
              "type": "dotted"
            }, 
            "type": "line"
          }
        ]
      }, 
      "title": "Gate Controller Invocations (per minute)"
    }, 
    {
      "definition": {
        "viz": "timeseries", 
        "requests": [
          {
            "q": "per_minute(sum:gate.controller.invocations_totalTime{*} by {method}) / 1000000 / per_minute(sum:gate.controller.invocations_count{*} by {method})", 
            "aggregator": "avg", 
            "conditional_formats": [], 
            "type": "line"
          }
        ]
      }, 
      "title": "Avg Gate Controller Invocation Time (ms per minute)"
    }, 
    {
      "definition": {
        "viz": "timeseries", 
        "requests": [
          {
            "q": "per_minute(sum:orca.controller.invocations_count{*} by {method})", 
            "aggregator": "avg", 
            "conditional_formats": [], 
            "type": "bars"
          }, 
          {
            "q": "per_minute(sum:orca.controller.invocations_count{*})", 
            "style": {
              "palette": "grey", 
              "type": "dotted"
            }, 
            "type": "line"
          }
        ]
      }, 
      "title": "Orca Controller Invocations (per minute)"
    }, 
    {
      "definition": {
        "viz": "timeseries", 
        "requests": [
          {
            "q": "per_minute(sum:orca.controller.invocations_totalTime{*} by {method}) / 1000000 / per_minute(sum:orca.controller.invocations_count{*} by {method})", 
            "aggregator": "avg", 
            "conditional_formats": [], 
            "type": "line"
          }
        ]
      }, 
      "title": "Avg Orca Controller Invocation Time (ms per minute)"
    }, 
    {
      "definition": {
        "viz": "timeseries", 
        "requests": [
          {
            "q": "diff(sum:orca.task.invocations{executiontype:orchestration,status:running} by {taskname})", 
            "aggregator": "avg", 
            "conditional_formats": [], 
            "type": "bars"
          }
        ], 
        "autoscale": true
      }, 
      "title": "Active Orchestrations (orca)"
    }, 
    {
      "definition": {
        "viz": "timeseries", 
        "requests": [
          {
            "q": "diff(sum:orca.task.invocations{executiontype:orchestration,status:succeeded} by {taskname})", 
            "aggregator": "avg", 
            "conditional_formats": [], 
            "type": "bars", 
            "style": {
              "palette": "cool"
            }
          }, 
          {
            "q": "- diff(sum:orca.task.invocations{executiontype:orchestration,status:terminal} by {taskname})", 
            "aggregator": "avg", 
            "conditional_formats": [], 
            "type": "bars", 
            "style": {
              "palette": "warm"
            }
          }
        ], 
        "autoscale": true
      }, 
      "title": "Completed Orchestrations (orca)"
    }, 
    {
      "definition": {
        "viz": "timeseries", 
        "requests": [
          {
            "q": "diff(sum:orca.task.invocations{status:running,executiontype:pipeline} by {taskname})", 
            "aggregator": "avg", 
            "conditional_formats": [], 
            "type": "bars"
          }
        ], 
        "autoscale": true
      }, 
      "title": "Active Pipelines (orca)"
    }, 
    {
      "definition": {
        "viz": "timeseries", 
        "requests": [
          {
            "q": "diff(sum:orca.task.invocations{status:succeeded,executiontype:pipeline} by {taskname})", 
            "aggregator": "avg", 
            "conditional_formats": [], 
            "type": "bars", 
            "style": {
              "palette": "cool"
            }
          }, 
          {
            "q": "- diff(sum:orca.task.invocations{status:terminal,executiontype:pipeline} by {taskname})", 
            "aggregator": "avg", 
            "conditional_formats": [], 
            "type": "bars", 
            "style": {
              "palette": "warm"
            }
          }
        ], 
        "autoscale": true
      }, 
      "title": "Completed Pipelines (orca)"
    }, 
    {
      "definition": {
        "viz": "timeseries", 
        "requests": [
          {
            "q": "sum:orca.threadpool.activeCount{*} by {id}", 
            "aggregator": "avg", 
            "conditional_formats": [], 
            "type": "bars"
          }
        ], 
        "autoscale": true
      }, 
      "title": "Active Orca Threads (per minute)"
    }, 
    {
      "definition": {
        "viz": "query_value", 
        "requests": [
          {
            "q": "sum:orca.threadpool.activeCount{*}", 
            "aggregator": "last", 
            "conditional_formats": []
          }
        ], 
        "autoscale": true, 
        "precision": "0"
      }, 
      "title": "Last known Orca Active Threads"
    }, 
    {
      "definition": {
        "viz": "timeseries", 
        "requests": [
          {
            "q": "per_minute(sum:igor.controller.invocations_totalTime{*} by {method}) / 1000000 / per_minute(avg:igor.controller.invocations_count{*} by {method})", 
            "aggregator": "avg", 
            "conditional_formats": [], 
            "type": "line"
          }
        ]
      }, 
      "title": "Igor Controller Invocation Time (ms per minute)"
    }, 
    {
      "definition": {
        "viz": "timeseries", 
        "requests": [
          {
            "q": "per_minute(sum:igor.controller.invocations_count{*} by {method})", 
            "aggregator": "avg", 
            "conditional_formats": [], 
            "type": "bars"
          }, 
          {
            "q": "per_minute(sum:igor.controller.invocations_count{*})", 
            "style": {
              "palette": "grey", 
              "type": "dotted"
            }, 
            "type": "line"
          }
        ]
      }, 
      "title": "Igor Controller Invocations (per minute)"
    }, 
    {
      "definition": {
        "viz": "timeseries", 
        "requests": [
          {
            "q": "per_minute(sum:echo.controller.invocations_count{*} by {method})", 
            "aggregator": "avg", 
            "conditional_formats": [], 
            "type": "bars"
          }, 
          {
            "q": "per_minute(sum:echo.controller.invocations_count{*})", 
            "style": {
              "palette": "grey", 
              "type": "dotted"
            }, 
            "type": "line"
          }
        ]
      }, 
      "title": "Echo Controller Invocations (per minute)"
    }, 
    {
      "definition": {
        "viz": "timeseries", 
        "requests": [
          {
            "q": "per_minute(sum:echo.controller.invocations_totalTime{*} by {method}) / 1000000 / per_minute(avg:echo.controller.invocations_count{*} by {method})", 
            "aggregator": "avg", 
            "conditional_formats": [], 
            "type": "line"
          }
        ]
      }, 
      "title": "Echo Controller Invocation Time (ms per minute)"
    }, 
    {
      "definition": {
        "viz": "timeseries", 
        "requests": [
          {
            "q": "per_minute(sum:echo.pipelines.triggered{*} by {application})", 
            "aggregator": "avg", 
            "conditional_formats": [], 
            "type": "bars"
          }, 
          {
            "q": "per_minute(sum:echo.pipelines.triggered{*})", 
            "style": {
              "palette": "grey", 
              "type": "dotted"
            }, 
            "type": "line"
          }
        ]
      }, 
      "title": "Echo Pipelines Triggered (per minute)"
    }, 
    {
      "definition": {
        "viz": "timeseries", 
        "requests": [
          {
            "q": "diff(sum:rosco.bakesActive{*})", 
            "aggregator": "avg", 
            "conditional_formats": [], 
            "type": "line"
          }, 
          {
            "q": "diff(sum:rosco.bakesRequested{*} by {flavor})", 
            "conditional_formats": [], 
            "type": "bars", 
            "style": {
              "palette": "cool"
            }
          }, 
          {
            "q": "diff(sum:rosco.bakesCompleted_count{success:false} by {region})", 
            "conditional_formats": [], 
            "type": "bars", 
            "style": {
              "palette": "warm"
            }
          }
        ], 
        "autoscale": true
      }, 
      "title": "Rosco Bake Activity"
    }, 
    {
      "definition": {
        "viz": "timeseries", 
        "requests": [
          {
            "q": "per_minute(sum:rosco.controller.invocations_count{*} by {method})", 
            "aggregator": "avg", 
            "conditional_formats": [], 
            "type": "bars"
          }, 
          {
            "q": "per_minute(sum:rosco.controller.invocations_count{*})", 
            "style": {
              "palette": "grey", 
              "type": "dotted"
            }, 
            "type": "line"
          }
        ]
      }, 
      "title": "Rosco Controller Invocations (per minute)"
    }, 
    {
      "definition": {
        "viz": "timeseries", 
        "requests": [
          {
            "q": "per_minute(sum:rosco.controller.invocations_totalTime{*} by {method}) / 1000000 / per_minute(avg:rosco.controller.invocations_count{*} by {method})", 
            "aggregator": "avg", 
            "conditional_formats": [], 
            "type": "line"
          }
        ]
      }, 
      "title": "Rosco Controller Invocation Time (ms per minute)"
    }, 
    {
      "definition": {
        "viz": "timeseries", 
        "requests": [
          {
            "q": "sum:front50.storageServiceSupport.cacheSize{*} by {objecttype}", 
            "aggregator": "avg", 
            "style": {
              "width": "thick", 
              "palette": "dog_classic"
            }, 
            "type": "line", 
            "conditional_formats": []
          }
        ]
      }, 
      "title": "front50 ItemCache Size"
    }, 
    {
      "definition": {
        "viz": "timeseries", 
        "requests": [
          {
            "q": "diff(sum:front50.storageServiceSupport.numAdded{*} by {objecttype})", 
            "aggregator": "avg", 
            "style": {
              "palette": "warm"
            }, 
            "type": "line", 
            "conditional_formats": []
          }, 
          {
            "q": "diff(sum:front50.storageServiceSupport.numRemoved{*} by {objecttype}) * - 1", 
            "style": {
              "palette": "cool"
            }, 
            "type": "line"
          }, 
          {
            "q": "diff(sum:front50.storageServiceSupport.numUpdated{*} by {objecttype})", 
            "style": {
              "palette": "purple"
            }, 
            "type": "line"
          }
        ]
      }, 
      "title": "front50 ItemCache Changes"
    }, 
    {
      "definition": {
        "viz": "timeseries", 
        "requests": [
          {
            "q": "per_minute(sum:front50.storageServiceSupport.cacheRefreshTime_count{*} by {objecttype}) - per_minute(sum:front50.storageServiceSupport.autoRefreshTime_count{*} by {objecttype}) - per_minute(sum:front50.storageServiceSupport.scheduledRefreshTime_count{*} by {objecttype})", 
            "aggregator": "avg", 
            "style": {
              "palette": "warm"
            }, 
            "type": "bars", 
            "conditional_formats": []
          }, 
          {
            "q": "per_minute(sum:front50.storageServiceSupport.autoRefreshTime_count{*} by {objecttype})", 
            "aggregator": "avg", 
            "style": {
              "width": "thick", 
              "palette": "cool"
            }, 
            "type": "line", 
            "conditional_formats": []
          }, 
          {
            "q": "per_minute(sum:front50.storageServiceSupport.scheduledRefreshTime_count{*} by {objecttype})", 
            "aggregator": "avg", 
            "style": {
              "palette": "cool"
            }, 
            "type": "bars", 
            "conditional_formats": []
          }
        ]
      }, 
      "title": "front50 cache refreshes (onDemand warm, scheduled cool)"
    }, 
    {
      "definition": {
        "viz": "timeseries", 
        "requests": [
          {
            "q": "diff(sum:front50.storageServiceSupport.cacheRefreshTime_totalTime{*} by {objecttype}) / 1000000", 
            "aggregator": "avg", 
            "conditional_formats": [], 
            "type": "bars"
          }
        ], 
        "yaxis": {
          "filter": {
            "below": 0.01
          }
        }
      }, 
      "title": "front50 cache refresh time (ms per minute)"
    }, 
    {
      "definition": {
        "viz": "timeseries", 
        "requests": [
          {
            "q": "diff(sum:front50.google.storage.invocation_count{*} by {method})", 
            "aggregator": "avg", 
            "conditional_formats": [], 
            "type": "line"
          }
        ], 
        "yaxis": {
          "filter": {
            "below": 0.01
          }
        }
      }, 
      "title": "Google Storage Service Invocation Count"
    }, 
    {
      "definition": {
        "viz": "timeseries", 
        "requests": [
          {
            "q": "per_minute(sum:front50.google.storage.invocation_totalTime{*} by {method}) / 1000000 / per_minute(sum:front50.google.storage.invocation_count{*} by {method})", 
            "aggregator": "avg", 
            "conditional_formats": [], 
            "type": "line"
          }
        ]
      }, 
      "title": "Google Storage Service Call Latency (ms per call per minute)"
    }, 
    {
      "definition": {
        "viz": "timeseries", 
        "requests": [
          {
            "q": "0 * ( per_minute(sum:clouddriver.aws.request.httpClientReceiveResponseTime_totalTime{*} by {requesttype}) / 1000000 ) / per_minute(sum:clouddriver.aws.request.httpClientReceiveResponseTime_count{*} by {requesttype})", 
            "aggregator": "avg", 
            "conditional_formats": [], 
            "type": "line", 
            "style": {
              "type": "dotted"
            }
          }, 
          {
            "q": "( per_minute(sum:clouddriver.aws.request.httpRequestTime_totalTime{*} by {serviceendpoint}) / 1000000 ) / per_minute(sum:clouddriver.aws.request.httpRequestTime_count{*} by {serviceendpoint})", 
            "conditional_formats": [], 
            "type": "line", 
            "style": {
              "type": "solid"
            }
          }
        ]
      }, 
      "title": "AWS httpRequest totalTime ms / call (per minute)"
    }, 
    {
      "definition": {
        "viz": "timeseries", 
        "requests": [
          {
            "q": "per_second(sum:clouddriver.controller.invocations_totalTime{method:getmetrics}) / 1000000000", 
            "aggregator": "avg", 
            "conditional_formats": [], 
            "type": "line"
          }, 
          {
            "q": "per_second(sum:echo.controller.invocations_totalTime{method:getmetrics}) / 1000000000", 
            "aggregator": "avg", 
            "conditional_formats": [], 
            "type": "line"
          }, 
          {
            "q": "per_second(sum:front50.controller.invocations_totalTime{method:getmetrics}) / 1000000000", 
            "aggregator": "avg", 
            "conditional_formats": [], 
            "type": "line"
          }, 
          {
            "q": "per_second(sum:gate.controller.invocations_totalTime{method:getmetrics}) / 1000000000", 
            "aggregator": "avg", 
            "conditional_formats": [], 
            "type": "line"
          }, 
          {
            "q": "per_second(sum:igor.controller.invocations_totalTime{method:getmetrics}) / 1000000000", 
            "aggregator": "avg", 
            "conditional_formats": [], 
            "type": "line"
          }, 
          {
            "q": "per_second(sum:orca.controller.invocations_totalTime{method:getmetrics}) / 1000000000", 
            "aggregator": "avg", 
            "conditional_formats": [], 
            "type": "line"
          }, 
          {
            "q": "per_second(sum:rosco.controller.invocations_totalTime{method:getmetrics}) / 1000000000", 
            "aggregator": "avg", 
            "conditional_formats": [], 
            "type": "line"
          }
        ]
      }, 
      "title": "Metric Collection Time (ms)"
    }, 
    {
      "definition": {
        "viz": "timeseries", 
        "requests": [
          {
            "q": "- diff(sum:clouddriver.google.api_count{success:false} by {api,scope}.as_rate()), diff(sum:clouddriver.google.api_count{success:true} by {api,scope}.as_rate())", 
            "aggregator": "avg", 
            "style": {
              "palette": "dog_classic"
            }, 
            "type": "area", 
            "conditional_formats": []
          }
        ], 
        "autoscale": true
      }, 
      "title": "Google API Call Rate"
    }, 
    {
      "definition": {
        "viz": "timeseries", 
        "requests": [
          {
            "q": "per_minute(sum:clouddriver.google.api_count{success:false} by {api,scope}.as_count())", 
            "aggregator": "avg", 
            "style": {
              "palette": "dog_classic"
            }, 
            "type": "bars", 
            "conditional_formats": []
          }
        ], 
        "autoscale": true
      }, 
      "title": "Google API Error Rate (per minute)"
    }, 
    {
      "definition": {
        "viz": "timeseries", 
        "requests": [
          {
            "q": "per_minute(sum:clouddriver.google.api_totalTime{*} by {api,scope}) / 1000000 / per_minute(sum:clouddriver.google.api_count{*} by {api,scope}.as_count())", 
            "aggregator": "avg", 
            "conditional_formats": [], 
            "type": "line"
          }
        ], 
        "autoscale": true
      }, 
      "title": "Google Api Call Latency (ms per call, by api per minute)"
    }, 
    {
      "definition": {
        "viz": "timeseries", 
        "requests": [
          {
            "q": "per_minute(sum:clouddriver.google.batchExecute_count{*} by {context})", 
            "aggregator": "avg", 
            "conditional_formats": [], 
            "type": "line"
          }
        ], 
        "autoscale": true
      }, 
      "title": "Google Batch Count (per minute)"
    }, 
    {
      "definition": {
        "viz": "timeseries", 
        "requests": [
          {
            "q": "per_minute(sum:clouddriver.google.batchExecute_totalTime{*} by {context}) / 1000000 / per_minute(sum:clouddriver.google.batchExecute_count{*} by {context})", 
            "aggregator": "avg", 
            "conditional_formats": [], 
            "type": "line"
          }
        ], 
        "autoscale": true
      }, 
      "title": "Batch Call Latency (ms per call minute)"
    }, 
    {
      "definition": {
        "viz": "timeseries", 
        "requests": [
          {
            "q": "per_minute(sum:clouddriver.google.batchSize{*} by {context})", 
            "aggregator": "avg", 
            "conditional_formats": [], 
            "type": "line"
          }
        ], 
        "autoscale": true
      }, 
      "title": "Batch Call Size (per minute)"
    }, 
    {
      "definition": {
        "viz": "timeseries", 
        "requests": [
          {
            "q": "diff(sum:clouddriver.google.operationWaits_count{status:done} by {basephase,scope})", 
            "aggregator": "avg", 
            "conditional_formats": [], 
            "type": "bars", 
            "style": {
              "palette": "dog_classic"
            }
          }
        ], 
        "autoscale": true, 
        "yaxis": {
          "filter": {
            "below": 0.01
          }
        }
      }, 
      "title": "Successful Google Operations (clouddriver)"
    }, 
    {
      "definition": {
        "viz": "timeseries", 
        "requests": [
          {
            "q": "diff(sum:clouddriver.google.operationWaits_count{!status:done} by {basephase,scope})", 
            "aggregator": "avg", 
            "conditional_formats": [], 
            "type": "bars", 
            "style": {
              "palette": "dog_classic"
            }
          }
        ], 
        "autoscale": true, 
        "yaxis": {
          "filter": {
            "below": 0.01
          }
        }
      }, 
      "title": "Failed Google Operations (clouddriver)"
    }, 
    {
      "definition": {
        "viz": "timeseries", 
        "requests": [
          {
            "q": "diff(sum:clouddriver.google.operationWaitRequests{*} by {basephase,scope})", 
            "aggregator": "avg", 
            "conditional_formats": [], 
            "type": "bars", 
            "style": {
              "palette": "dog_classic"
            }
          }
        ], 
        "autoscale": true, 
        "yaxis": {
          "filter": {
            "below": 0.01
          }
        }
      }, 
      "title": "Google Operations Started (clouddriver)"
    }, 
    {
      "definition": {
        "viz": "timeseries", 
        "requests": [
          {
            "q": "diff(sum:clouddriver.google.operationWaits_totalTime{*} by {basephase,status}) / 1000000 / diff(sum:clouddriver.google.operationWaits_count{*} by {basephase,status})", 
            "aggregator": "avg", 
            "conditional_formats": [], 
            "type": "bars"
          }
        ], 
        "autoscale": true
      }, 
      "title": "Avg Google Operation Wait Time (ms per operation)"
    }, 
    {
      "definition": {
        "viz": "timeseries", 
        "requests": [
          {
            "q": "diff(sum:clouddriver.google.operationWaits_count{status:done} by {basephase}), - diff(avg:clouddriver.google.operationWaits_count{!status:done} by {basephase})", 
            "aggregator": "avg", 
            "conditional_formats": [], 
            "type": "bars"
          }
        ], 
        "autoscale": true, 
        "yaxis": {
          "filter": {
            "below": 0.01
          }
        }
      }, 
      "title": "Google Operation Waits by Phase"
    }, 
    {
      "definition": {
        "viz": "timeseries", 
        "requests": [
          {
            "q": "avg:clouddriver.spectator.datapoints{*}, avg:echo.spectator.datapoints{*}, avg:fiat.spectator.datapoints{*}, avg:front50.spectator.datapoints{*}, avg:gate.spectator.datapoints{*}, avg:orca.spectator.datapoints{*}, avg:rosco.spectator.datapoints{*}", 
            "aggregator": "avg", 
            "conditional_formats": [], 
            "type": "bars"
          }
        ], 
        "autoscale": true
      }, 
      "title": "Spectator Time Series Streams"
    }
  ], 
  "description": "Contains graphs of various metrics within Spinnaker to illustrate what is available.", 
  "title": "Spinnaker Kitchen Sink"
}
